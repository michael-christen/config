" Heavy inspiration from: https://dougblack.io/words/a-good-vimrc.html

" Colors {{{
syntax enable        " enable syntax processing

" Configure solarized
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
" }}}

" Whitespace {{{
set tabstop=4        " number of visual spaces per TAB
set softtabstop=4    " number of spaces in TAB when editing
set expandtab        " tabs are spaces
" }}}

" UI Config {{{
set number           " show line numbers
set relativenumber   " show number relative to current line
set showcmd          " show command in bottom bar
set cursorline       " highlight current row of text
set cursorcolumn     " highlight current column of text
set wildmenu         " visual autocomplete for command menu
set lazyredraw       " redraw only when we needto (faster macros!)
set showmatch        " highlight matching brackets
set ruler            " Show line and column in status bar
filetype indent on   " load filetype-specific indent files
" }}}

" Searching {{{
set incsearch        " search as characters are entered
set hlsearch         " highlight matches
" turn off search highlighting
nnoremap <leader><space> :nohlsearch<CR>
" }}}

" Movement {{{
" move vertically by visual line (gets around super long lines)
nnoremap j gj
nnoremap k gk
" higlight last inserted text
nnoremap gV `[v`]
" Move to begging/end of line
" nnoremap B ^
" nnoremap E $
" Disable ^ $
" nnoremap $ <nop>
" nnoremap ^ <nop>
" }}}

" Shortcuts {{{
let mapleader=","       " leader is comma vs '\'
" ;; is escape
inoremap ;; <esc>
" save vim session
nnoremap <leader>s :mksession<CR>
" Quickly navigate windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" Add line below
nnoremap <CR> o<ESC>k

" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Color configuration
if &term =~ '^screen'
    " term 256color doesn't work, so have different setting
    set term=screen-256color
    set ttymouse=xterm2
else
    set term=xterm-256color
endif
" }}}

" Folding {{{
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
" space open/closes folds
nnoremap <space> za
set foldmethod=indent   " fold based on indent level
" }}}

" Plugins {{{
" surround
" repeat
" objtext
" ag.vim  " Source searching!
" open ag.vim
" nnoremap <leader>a :Ag
" gundo.vim  " Display undo tree in graphical form
" ctrlp.vim  " Fuzzy file searching vs commandt.vim
" CtrlP settings
" let g:ctrlp_match_window = 'bottom,order:ttb'
" let g:ctrlp_switch_buffer = 0
" let g:ctrlp_working_path_mode = 0
" let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
"
" call pathogen#infect()                      " use pathogen
" call pathogen#runtime_append_all_bundles()  " use pathogen
" }}}

" Autogroup {{{
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
                \:call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.mk setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END
" }}}

" Backups {{{
" Dangerous
set nobackup
set nowritebackup
set noswapfile
" Safe, but annoying
" set backup
" set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
" set backupskip=/tmp/*,/private/tmp/*
" set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
" set writebackup
" }}}

" Custom Functions {{{
" toggle between number and relativenumber
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction
" }}}
